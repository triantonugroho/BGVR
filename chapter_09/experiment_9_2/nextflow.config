/*
 * -------------------------------------------------
 *  Nextflow config file for bio-pseudo-align pipeline
 * -------------------------------------------------
 */

// Global default params
params {
    // Workflow flags
    method = 'pseudo'
    
    // Input options
    reads = null
    
    // Pseudo-alignment options
    kmer_index = 'data/kmer_index.json'
    kmer_length = 31
    min_read_length = 50
    
    // QC options
    skip_qc = false
    skip_multiqc = false
    
    // Output options
    outdir = 'results'
    publish_dir_mode = 'copy'
    
    // Max resource options
    max_memory = '128.GB'
    max_cpus = 16
    max_time = '240.h'
    
    // Config options
    help = false
    version = false
    
    // Ignore iGenomes for now
    igenomes_ignore = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug { 
        process.beforeScript = 'echo $HOSTNAME' 
    }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        process.container      = 'ubuntu:22.04'
    }
    
    test { 
        includeConfig 'conf/test.config' 
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Export these variables to prevent local libraries from conflicting
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'bio-pseudo-align'
    author          = 'Your Name'
    homePage        = 'https://github.com/your-org/bio-pseudo-align'
    description     = 'Bioinformatics pipeline for RNA-seq pseudo-alignment'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
